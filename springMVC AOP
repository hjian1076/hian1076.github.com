springMVC AOP(Aspect-Oriented Programming,面向切面编程)
  一.AOP的概述
    1.切面（Aspect）：横切关注点被模块化的对象
    2.通知（Advice）：切面必须完成的工作
    3.目标（Target）：被通知的对象
    4.代理（Proxy） ：像目标应用对象通知之后创建的对象
    5.连接点（jionpoint）:程序执行的某个特殊的位置，如类某个方法的调用前，调用后，方法抛出异常后等等，
      连接点由两个信息确认：方法表示的程序执行点，想对点表示的方法
    6.切点（pointcut）：每个类都拥有多个连接点，即连接点是程序中客观存在的事务

    AOP通过切点定位到特定的连接点
    AOP的主要编程对象是切面（aopect）,而切面模块化横切关注点。

    在应用AOP编程时，仍需要定义公共功能，但可以明确这个功能在哪里，以什么方式应用，并且不必修改受影响的类，
    这样的话横切关注点就被模块化到特殊的对象（切面）里。

    AOP的好处：
    每个事物逻辑位于一个位置，代码不分散，便于维护和升级；
    业务模块更简洁，值包含核心业务代码
  
 二.AOP的配置
    1.基于AspectJ注解
      a.Maven引入依赖包
      <dependency>  
        <groupId>org.springframework</groupId>  
        <artifactId>spring-aop</artifactId>  
        <version>2.5.6</version>  
      </dependency>  
      <dependency>  
        <groupId>org.aspectj</groupId>  
        <artifactId>aspectjweaver</artifactId>  
        <version>1.6.1</version>  
      </dependency>  
      <dependency>  
        <groupId>org.aspectj</groupId>  
        <artifactId>aspectjrt</artifactId>  
        <version>1.6.1</version>  
      </dependency>  
      
      b.在springMVC配置中添加AOP命名空间，同时配置使项目支持AOP
        <!--激活组件扫描功能,在包"com.web.controller及其子包下面自动扫描通过注解配置的组件 -->
         <context:component-scan base-package="com.web.controller"/>
        <!--启动AspectJ支持   只对扫描过的bean有效 -->
        <aop:aspectj-autoproxy proxy-target-class="true" />
      
      c.加入AOP逻辑处理类（实现一个日志切面）
        1.切面首先得是IOC容器中一个bean，即在切面类上加上标签@Component
        2.需要申明该切面类是一个切面，所以要加上标签@Aspect
        3.实现需要的通知，在方法之前添加如下的通知类型：
          a.@Before：前置通知，在方法前通知
          b.@After：后置通知，在方法执行后通知
          c.@AfterRunning：返回通知，在方法返回结果之后通知
          d.@AfterThrowing：异常通知，在方法抛出异常之后通知
          e.@Around：环绕通知，围绕着方法执行
       d.切面的表达式书写
         execution(public * com.web.controller.*.*(..)):第一个*表示任意的返回类型（void/Object）；第二个*表示在com.web.controller包下的任意的类，
         第二个*表示任意的方法，‘..’表示任意数量的参数
       
       AOP逻辑处理类例子：
         import java.util.Arrays;
         import java.util.List;

         import org.aspectj.lang.JoinPoint;
         import org.aspectj.lang.ProceedingJoinPoint;
         import org.aspectj.lang.annotation.After;
         import org.aspectj.lang.annotation.AfterReturning;
         import org.aspectj.lang.annotation.AfterThrowing;
         import org.aspectj.lang.annotation.Around;
         import org.aspectj.lang.annotation.Aspect;
         import org.aspectj.lang.annotation.Before;
         import org.aspectj.lang.annotation.Pointcut;
         import org.springframework.core.annotation.Order;
         import org.springframework.stereotype.Component;

          @Aspect    //该标签把LoggerAspect类声明为一个切面
          @Order(1)  //设置切面的优先级：如果有多个切面，可通过设置优先级控制切面的执行顺序（数值越小，优先级越高）
          @Component //该标签把LoggerAspect类放到IOC容器中
          public class LoggerAspect {

              /**
               * 定义一个方法，用于声明切入点表达式，方法中一般不需要添加其他代码
               * 使用@Pointcut声明切入点表达式
               * 后面的通知直接使用方法名来引用当前的切点表达式；如果是其他类使用，加上包名即可
               */
              @Pointcut("execution(public * com.parry.redisCluster.controller.*Controller.*(..))")
              public void declearJoinPointExpression(){}

              /**
               * 前置通知
               * @param joinPoint
               */
              @Before("declearJoinPointExpression()") //该标签声明次方法是一个前置通知：在目标方法开始之前执行
              public void beforMethod(JoinPoint joinPoint){
                  String methodName = joinPoint.getSignature().getName();
                  List<Object> args = Arrays.asList(joinPoint.getArgs());
                  System.out.println("this method "+methodName+" begin. param<"+ args+">");
              }
              /**
               * 后置通知（无论方法是否发生异常都会执行,所以访问不到方法的返回值）
               * @param joinPoint
               */
              @After("declearJoinPointExpression()")
              public void afterMethod(JoinPoint joinPoint){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("this method "+methodName+" end.");
              }
              /**
               * 返回通知（在方法正常结束执行的代码）
               * 返回通知可以访问到方法的返回值！
               * @param joinPoit
               */
              @AfterReturning(value="declearJoinPointExpression()",returning="result")
              public void afterReturnMethod(JoinPoint joinPoint,Object result){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("this method "+methodName+" end.result<"+result+">");
              }
              /**
               * 异常通知（方法发生异常执行的代码）
               * 可以访问到异常对象；且可以指定在出现特定异常时执行的代码
               * @param joinPoint
               * @param ex
               */
              @AfterThrowing(value="declearJoinPointExpression()",throwing="ex")
              public void afterThrowingMethod(JoinPoint joinPoint,Exception ex){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("this method "+methodName+" end.ex message<"+ex+">");
              }
              /**
               * 环绕通知(需要携带类型为ProceedingJoinPoint类型的参数)
               * 环绕通知包含前置、后置、返回、异常通知；ProceedingJoinPoin 类型的参数可以决定是否执行目标方法
               * 且环绕通知必须有返回值，返回值即目标方法的返回值
               * @param joinPoint
               */
              @Around(value="declearJoinPointExpression()")
              public Object aroundMethod(ProceedingJoinPoint point){

                  Object result = null;
                  String methodName = point.getSignature().getName();
                  try {
                      //前置通知
                      System.out.println("The method "+ methodName+" start. param<"+ Arrays.asList(point.getArgs())+">");
                      //执行目标方法
                      result = point.proceed();
                      //返回通知
                      System.out.println("The method "+ methodName+" end. result<"+ result+">");
                  } catch (Throwable e) {
                      //异常通知
                      System.out.println("this method "+methodName+" end.ex message<"+e+">");
                      throw new RuntimeException(e);
                  }
                  //后置通知
                  System.out.println("The method "+ methodName+" end.");
                  return result;
              }

    2.基于XML配置的AOP
      a.springMVC相关配置文件
        <!--使Spring支持自动检测组件，如注解的Controller -->
        <context:component-scan base-package="com.parry.redisCluster.*" />

        <!-- 配置切面的Bean -->
        <bean id="validationAspect" class="com.cn21.redisCluster.aspect.ValidationAspect"></bean>

        <!-- 配置AOP -->
        <aop:config>
            <!-- 配置切点表达式  -->
            <aop:pointcut id="pointcut" expression="execution(public * com.web.controller.*.*(..))" />
            <!-- 配置切面及配置 -->
            <aop:aspect order="3" ref="validationAspect">
                <!-- 前置通知 -->
                <aop:before method="beforMethod" pointcut-ref="pointcut"/>
                <!-- 后置通知 -->
                <aop:after method="afterMethod" pointcut-ref="pointcut"/>
                <!-- 返回通知 -->
                <aop:after-returning method="afterReturnMethod" pointcut-ref="pointcut" returning="result"/>
                <!-- 异常通知 -->
                <aop:after-throwing method="afterThrowingMethod" pointcut-ref="pointcut" throwing="ex"/>
            </aop:aspect>
        </aop:config>
       b.实现切面类
        
          public class ValidationAspect {

              /**
               * 前置通知
               * @param joinPoint
               */
              public void beforMethod(JoinPoint joinPoint){
                  String methodName = joinPoint.getSignature().getName();
                  List<Object> args = Arrays.asList(joinPoint.getArgs());
                  System.out.println("ValidationAspect this method "+methodName+" begin. param<"+ args+">");
              }
              /**
               * 后置通知（无论方法是否发生异常都会执行,所以访问不到方法的返回值）
               * @param joinPoint
               */
              public void afterMethod(JoinPoint joinPoint){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("ValidationAspect this method "+methodName+" end.");
              }
              /**
               * 返回通知（在方法正常结束执行的代码）
               * 返回通知可以访问到方法的返回值！
               * @param joinPoit
               */
              public void afterReturnMethod(JoinPoint joinPoint,Object result){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("ValidationAspect this method "+methodName+" end.result<"+result+">");
              }
              /**
               * 异常通知（方法发生异常执行的代码）
               * 可以访问到异常对象；且可以指定在出现特定异常时执行的代码
               * @param joinPoint
               * @param ex
               */
              public void afterThrowingMethod(JoinPoint joinPoint,Exception ex){
                  String methodName = joinPoint.getSignature().getName();
                  System.out.println("ValidationAspect this method "+methodName+" end.ex message<"+ex+">");
              }
          }
    在Spring AOP实现中，使用的核心技术是动态代理。
    通过JDK的动态代理特性，可以为任意Java对象创建代理对象，这个特性是通过Java Reflection API来完成的。
    相反Spring AOP还将ApsectJ集成了进来。
    这个代理对象可以通过使用JDK的proxy来完成，也可以通过第三方的类生成器CGLIB来完成
